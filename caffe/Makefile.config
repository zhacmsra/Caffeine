## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# cuDNN acceleration switch (uncomment to build with cuDNN).
# USE_CUDNN := 1

# CPU-only switch (uncomment to build without GPU support).
	CPU_ONLY := 1

# uncomment to disable IO dependencies and corresponding data layers
# USE_OPENCV := 0
	USE_LEVELDB := 0
# USE_LMDB := 0

# uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)
#	You should not set this flag if you will be reading LMDBs with any
#	possibility of simultaneous read and write
# ALLOW_LMDB_NOLOCK := 1

# Uncomment if you're using OpenCV 3
# OPENCV_VERSION := 3

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
# CUSTOM_CXX := g++

# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR := /usr/local/cuda
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them.
# For CUDA < 6.0, comment the *_50 lines for compatibility.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
		-gencode arch=compute_20,code=sm_21 \
		-gencode arch=compute_30,code=sm_30 \
		-gencode arch=compute_35,code=sm_35 \
		-gencode arch=compute_50,code=sm_50 \
		-gencode arch=compute_50,code=compute_50

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
#BLAS := atlas
BLAS := open
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /path/to/your/blas
# BLAS_LIB := /path/to/your/blas
BLAS_INCLUDE := /curr/chenz/tools/OpenBLAS/OpenBLAS_install/include
BLAS_LIB := /curr/chenz/tools/OpenBLAS/OpenBLAS_install/lib

# Homebrew puts openblas in a directory that is not on the standard search path
# BLAS_INCLUDE := $(shell brew --prefix openblas)/include
# BLAS_LIB := $(shell brew --prefix openblas)/lib

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
# MATLAB_DIR := /usr/local
# MATLAB_DIR := /Applications/MATLAB_R2012b.app

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
#
#PYTHON_INCLUDE := /usr/include/python2.6 \
		/usr/lib/python2.7/dist-packages/numpy/core/include

PYTHON_INCLUDE := /home/cdscdemo/tools/anaconda2/include/ \
                  /home/cdscdemo/tools/anaconda2/include/python2.7/ \
                  /home/cdscdemo/tools/anaconda2/lib/python2.7/site-packages/numpy/core/include/

# Anaconda Python distribution is quite popular. Include path:
# Verify anaconda location, sometimes it's in root.
# ANACONDA_HOME := $(HOME)/anaconda
# PYTHON_INCLUDE := $(ANACONDA_HOME)/include \
		# $(ANACONDA_HOME)/include/python2.7 \
		# $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \

# Uncomment to use Python 3 (default is Python 2)
# PYTHON_LIBRARIES := boost_python3 python3.5m
# PYTHON_INCLUDE := /usr/include/python3.5m \
#                 /usr/lib/python3.5/dist-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
# PYTHON_LIB := /usr/lib
PYTHON_LIB := /home/cdscdemo/tools/anaconda2/lib

# Homebrew installs numpy in a non standard path (keg only)
# PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include
# PYTHON_LIB += $(shell brew --prefix numpy)/lib

# Uncomment to support layers written in Python (will link against Python libs)
# WITH_PYTHON_LAYER := 1

# Whatever else you find you need goes here.
#INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include
#LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib

# If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies
# INCLUDE_DIRS += $(shell brew --prefix)/include
# LIBRARY_DIRS += $(shell brew --prefix)/lib
# BOOST
BOOST := /curr/chenz/tools/boost_1_55_0/install
BOOST_INCLUDE := $(BOOST)/include
BOOST_LIB := $(BOOST)/lib
# OpenCV
# OCV := /curr/diwu/tools/opencv-2.4.10/build/
# OCV := /curr/chenz/tools/anaconda2_n0/pkgs/opencv-2.4.11-nppy27_0/
OCV := /home/cdscdemo/tools/opencv/build
OCV_INCLUDE := $(OCV)/include
OCV_LIB := $(OCV)/lib

# glog
GLOG := /curr/chenz/tools/glog-0.3.3/build/install
GLOG_INCLUDE := $(GLOG)/include
GLOG_LIB := $(GLOG)/lib

# gflags
GFLAGS := /curr/chenz/tools/gflags-master/build
GFLAGS_INCLUDE := $(GFLAGS)/include
GFLAGS_LIB := $(GFLAGS)/lib

# lmdb
LMDB := /curr/chenz/tools/mdb
LMDB_INCLUDE := $(LMDB)/libraries/liblmdb
LMDB_LIB := $(LMDB)/libraries/liblmdb

# protobuf
PROTOBUF := /curr/diwu/tools/protobuf-2.5.0/build/install
PROTOBUF_INCLUDE := $(PROTOBUF)/include
PROTOBUF_LIB := $(PROTOBUF)/lib

# hdf5
HDF5 := /curr/chenz/tools/hdf5_install
HDF5_INCLUDE := $(HDF5)/include
HDF5_LIB := $(HDF5)/lib

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) \
								$(BOOST_INCLUDE) \
								$(OCV_INCLUDE) \
								$(GLOG_INCLUDE) \
								$(GFLAGS_INCLUDE) \
								$(LMDB_INCLUDE) \
								$(PROTOBUF_INCLUDE) \
								$(HDF5_INCLUDE) \
								$(CUDA_INCLUDE) \
								/usr/local/include
LIBRARY_DIRS := $(PYTHON_LIB) \
								$(BOOST_LIB) \
								$(OCV_LIB) \
								$(GLOG_LIB) \
								$(GFLAGS_LIB) \
								$(LMDB_LIB) \
								$(PROTOBUF_LIB) \
								$(HDF5_LIB) \
								$(CUDA_LIB) \
								/usr/local/lib \
								/usr/lib 





# Uncomment to use `pkg-config` to specify OpenCV library paths.
# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)
# USE_PKG_CONFIG := 1

# N.B. both build and distribute dirs are cleared on `make clean`
BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0

# enable pretty build (comment to see full commands)
Q ?= @
